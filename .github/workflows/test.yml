name: Run kj-utils tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.os }} • ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest,  compiler: gcc,   cc: gcc,   cxx: g++ }
          - { os: ubuntu-latest,  compiler: clang, cc: clang, cxx: clang++ }
          - { os: windows-latest, compiler: msvc }

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ---------- Linux ----------
      - name: Setup (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build
          echo "CC=${{ matrix.cc }}"  >> $GITHUB_ENV
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

      # ---------- Windows (MSVC) ----------
      - name: Setup MSVC environment (x64)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Ninja (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: choco install ninja --no-progress

      - name: Sanitize PATH (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $env:PATH = ($env:PATH -split ';' | Where-Object {$_ -notmatch 'msys|mingw'}) -join ';'
          "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache FetchContent deps
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: deps-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('**/CMakeLists.txt', '**/test/CMakeLists.txt') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ matrix.compiler }}-
            deps-${{ runner.os }}-

      - name: Configure (Release)
        run: >
          cmake -S . -B build -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DKJ_UTILS_ENABLE_TESTS=ON
          -DKJ_UTILS_BUILD_EXAMPLES=ON
          ${{ matrix.os == 'windows-latest' && '-DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl' || '' }}

      - name: Build
        run: cmake --build build -j

      # Ensure reports dir
      - name: Ensure test reports dir (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: mkdir -p build/test/reports

      - name: Ensure test reports dir (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: New-Item -ItemType Directory -Force build/test/reports | Out-Null

      # Run tests
      - name: Run tests (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: ctest --test-dir build -j --output-on-failure

      - name: Run tests (Windows, MSVC)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: ctest --test-dir build -C Release -j --output-on-failure

      - name: Upload test reports (JUnit)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-${{ matrix.os }}-${{ matrix.compiler }}
          path: build/test/reports/*.xml
          if-no-files-found: warn
          retention-days: 180
